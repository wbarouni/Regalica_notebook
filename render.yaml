# render.yaml
# Configuration complète pour déployer Regalica Notebook sur Render
# Inclut tous les microservices et fonctionnalités

services:
  # Backend Express.js
  - type: web
    name: regalica-backend
    runtime: node
    region: frankfurt
    plan: starter
    rootDir: ./backend
    buildCommand: npm ci
    startCommand: npm start
    healthCheckPath: /health/ready
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 10000
      - key: SERVER_PORT
        value: 10000
      - key: LOG_LEVEL
        value: info
      - key: DATABASE_URL
        fromDatabase:
          name: regalica-db
          property: connectionString
      - key: DB_SCHEMA
        value: nbk
      - key: MAX_UPLOAD_MB
        value: 100
      # Microservice Embedder
      - key: EMBED_API_URL
        fromService:
          type: web
          name: regalica-embedder
          property: host
      - key: EMBED_MODEL_NAME
        value: sentence-transformers/all-MiniLM-L6-v2
      - key: CHUNK_TOKENS_MAX
        value: 1800
      - key: CHUNK_OVERLAP_PCT
        value: 0.25
      - key: ALLOWED_MIME
        value: application/pdf,application/vnd.openxmlformats-officedocument.wordprocessingml.document,text/html,text/plain
      - key: OCR_ENABLE
        value: false
      # Microservice Reranker et LLM
      - key: RAG_TOP_K
        value: 50
      - key: RAG_CITATIONS_MIN
        value: 2
      - key: RAG_CONFIDENCE_THRESHOLD
        value: 0.6
      - key: RERANKER_API_URL
        fromService:
          type: web
          name: regalica-reranker
          property: host
      - key: LLM_API_URL
        value: https://api.openai.com/v1
      - key: LLM_MODEL_NAME
        value: gpt-3.5-turbo
      - key: OPENAI_API_KEY
        sync: false
    autoDeploy: true

  # Microservice Embedder (Python)
  - type: web
    name: regalica-embedder
    runtime: python
    region: frankfurt
    plan: starter
    rootDir: ./embedder
    buildCommand: pip install -r requirements.txt
    startCommand: python app.py
    healthCheckPath: /health
    envVars:
      - key: PORT
        value: 10000
      - key: MODEL_NAME
        value: sentence-transformers/all-MiniLM-L6-v2
    autoDeploy: true

  # Microservice Reranker (Python)
  - type: web
    name: regalica-reranker
    runtime: python
    region: frankfurt
    plan: starter
    rootDir: ./reranker
    buildCommand: pip install -r requirements.txt
    startCommand: python app.py
    healthCheckPath: /health
    envVars:
      - key: PORT
        value: 10000
      - key: MODEL_NAME
        value: BAAI/bge-reranker-v2-m3
    autoDeploy: true

  # Frontend Angular
  - type: static
    name: regalica-frontend
    buildCommand: npm ci && npm run build -- --configuration=production
    staticPublishPath: ./dist/regalica-frontend/browser
    rootDir: ./frontend
    envVars:
      - key: NODE_ENV
        value: production
    headers:
      - path: /*
        name: X-Frame-Options
        value: SAMEORIGIN
      - path: /*
        name: X-Content-Type-Options
        value: nosniff
      - path: /*
        name: Cache-Control
        value: public, max-age=3600
    routes:
      - type: rewrite
        source: /*
        destination: /index.html
    autoDeploy: true

# Base de données PostgreSQL
databases:
  - name: regalica-db
    databaseName: regalica
    user: regalica_user
    plan: free
    region: frankfurt
    ipAllowList: []
