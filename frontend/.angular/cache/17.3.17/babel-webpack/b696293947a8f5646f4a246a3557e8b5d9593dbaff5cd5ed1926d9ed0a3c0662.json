{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let ViewerService = /*#__PURE__*/(() => {\n  class ViewerService {\n    constructor() {\n      this.currentDocumentSubject = new BehaviorSubject(null);\n      this.currentDocument$ = this.currentDocumentSubject.asObservable();\n      this.highlightedSpansSubject = new BehaviorSubject([]);\n      this.highlightedSpans$ = this.highlightedSpansSubject.asObservable();\n      this.currentPageSubject = new BehaviorSubject(1);\n      this.currentPage$ = this.currentPageSubject.asObservable();\n    }\n    /**\n     * Charge un document dans le viewer\n     */\n    loadDocument(document) {\n      this.currentDocumentSubject.next(document);\n      this.currentPageSubject.next(1);\n      this.clearHighlights();\n    }\n    /**\n     * Obtient le document actuellement affiché\n     */\n    getCurrentDocument() {\n      return this.currentDocumentSubject.value;\n    }\n    /**\n     * Change la page courante\n     */\n    setCurrentPage(page) {\n      const doc = this.getCurrentDocument();\n      if (doc && doc.pages && page >= 1 && page <= doc.pages.length) {\n        this.currentPageSubject.next(page);\n      }\n    }\n    /**\n     * Obtient la page courante\n     */\n    getCurrentPage() {\n      return this.currentPageSubject.value;\n    }\n    /**\n     * Fait défiler vers un span spécifique et le met en surbrillance\n     */\n    scrollToSpan(request) {\n      const doc = this.getCurrentDocument();\n      if (!doc || doc.id !== request.docId) {\n        console.warn('Document not loaded or ID mismatch:', request.docId);\n        return;\n      }\n      // Changer de page si nécessaire\n      if (request.page && request.page !== this.getCurrentPage()) {\n        this.setCurrentPage(request.page);\n      }\n      // Ajouter le highlight\n      this.addHighlight(request);\n      // Scroll vers l'élément après un court délai pour permettre le rendu\n      setTimeout(() => {\n        this.performScroll(request);\n      }, 100);\n    }\n    /**\n     * Ajoute un highlight à la liste\n     */\n    addHighlight(request) {\n      const currentHighlights = this.highlightedSpansSubject.value;\n      // Éviter les doublons\n      const exists = currentHighlights.some(h => h.docId === request.docId && h.page === request.page && h.spanStart === request.spanStart && h.spanEnd === request.spanEnd);\n      if (!exists) {\n        this.highlightedSpansSubject.next([...currentHighlights, request]);\n      }\n    }\n    /**\n     * Effectue le scroll physique vers l'élément\n     */\n    performScroll(request) {\n      // Chercher l'élément par attribut data\n      const selector = `[data-span-start=\"${request.spanStart}\"][data-span-end=\"${request.spanEnd}\"]`;\n      const element = document.querySelector(selector);\n      if (element) {\n        element.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center',\n          inline: 'nearest'\n        });\n        // Ajouter une classe temporaire pour l'animation\n        element.classList.add('viewer-highlight-flash');\n        setTimeout(() => {\n          element.classList.remove('viewer-highlight-flash');\n        }, 2000);\n      } else {\n        // Fallback: scroll vers le début du contenu\n        const contentElement = document.querySelector('.viewer-content');\n        if (contentElement) {\n          contentElement.scrollTop = Math.max(0, request.spanStart / 1000 * contentElement.scrollHeight);\n        }\n      }\n    }\n    /**\n     * Efface tous les highlights\n     */\n    clearHighlights() {\n      this.highlightedSpansSubject.next([]);\n    }\n    /**\n     * Supprime un highlight spécifique\n     */\n    removeHighlight(request) {\n      const currentHighlights = this.highlightedSpansSubject.value;\n      const filtered = currentHighlights.filter(h => !(h.docId === request.docId && h.page === request.page && h.spanStart === request.spanStart && h.spanEnd === request.spanEnd));\n      this.highlightedSpansSubject.next(filtered);\n    }\n    /**\n     * Vérifie si un span est actuellement en surbrillance\n     */\n    isHighlighted(docId, page, spanStart, spanEnd) {\n      const highlights = this.highlightedSpansSubject.value;\n      return highlights.some(h => h.docId === docId && h.page === page && h.spanStart === spanStart && h.spanEnd === spanEnd);\n    }\n    /**\n     * Obtient les highlights pour la page courante\n     */\n    getHighlightsForCurrentPage() {\n      const currentPage = this.getCurrentPage();\n      const doc = this.getCurrentDocument();\n      if (!doc) return [];\n      return this.highlightedSpansSubject.value.filter(h => h.docId === doc.id && h.page === currentPage);\n    }\n    static {\n      this.ɵfac = function ViewerService_Factory(t) {\n        return new (t || ViewerService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ViewerService,\n        factory: ViewerService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ViewerService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}