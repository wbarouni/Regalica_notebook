{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/app-config.service\";\nexport let ApiBaseInterceptor = /*#__PURE__*/(() => {\n  class ApiBaseInterceptor {\n    constructor(appConfig) {\n      this.appConfig = appConfig;\n    }\n    intercept(_request, next) {\n      // Ne traiter que les requêtes relatives qui commencent par /api/, /rag/, /sources/, /ingest/\n      if (this.shouldPrefixUrl(_request.url)) {\n        const baseUrl = this.appConfig.getBackendBaseUrl();\n        if (baseUrl) {\n          // Créer une nouvelle requête avec l\\'URL préfixée\n          const apiRequest = _request.clone({\n            url: `${baseUrl}${_request.url}`\n          });\n          return next.handle(apiRequest);\n        }\n      }\n      // Passer la requête sans modification\n      return next.handle(_request);\n    }\n    /**\n     * Détermine si l'URL doit être préfixée avec l'URL de base du backend\n     */\n    shouldPrefixUrl(url) {\n      // Ne pas préfixer les URLs absolues\n      if (url.startsWith('http://') || url.startsWith('https://')) {\n        return false;\n      }\n      // Préfixer les URLs API relatives\n      return url.startsWith('/api/') || url.startsWith('/rag/') || url.startsWith('/sources/') || url.startsWith('/ingest/');\n    }\n    static {\n      this.ɵfac = function ApiBaseInterceptor_Factory(t) {\n        return new (t || ApiBaseInterceptor)(i0.ɵɵinject(i1.AppConfigService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ApiBaseInterceptor,\n        factory: ApiBaseInterceptor.ɵfac\n      });\n    }\n  }\n  return ApiBaseInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}